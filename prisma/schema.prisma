// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Menu {
  id        Int      @id @default(autoincrement())
  day       String
  mealType  String
  mainCourse String
  sideDish  String
  dessert   String
  beverage  String
  rating    Float? @default(0)
  reviewCount Int     @default(0)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  type          String?   @default("user") // "admin" or "user"
  emailVerified DateTime?
  password      String?
  reviews       Review[] 
  Suggestion Suggestion[]
  Attendance Attendance[]
  likedSuggestion Suggestion[] @relation("likedSuggestion")
  dislikedSuggestion Suggestion[] @relation("dislikedSuggestion")
  preferences   String?  @default("vegeterian") // vegeterian, non-vegetarian, vegan, etc.
  rollNumber    String?
}

model Review {
  id        Int      @id @default(autoincrement())
  mealType  String
  rating    Float
  category  String
  comment   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  day       String
}

model Suggestion {
  id        Int      @id @default(autoincrement())
  mealType  String
  name      String
  description String
  likes     Int      @default(0)
  dislikes  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  likedBy   User[]   @relation("likedSuggestion")
  dislikedBy User[]  @relation("dislikedSuggestion")
  status   String   // 'pending' or 'approved' or 'rejected'
}

model Attendance {
  id        String   @id @default(cuid())
  userId    String
  mealId    String
  status    String   // 'present' or 'absent'
  markedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  @@index([userId])
  @@index([mealId])
}
